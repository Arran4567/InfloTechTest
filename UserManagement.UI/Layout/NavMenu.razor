@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">User Management</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        @if (string.IsNullOrEmpty(token) || tokenExpiry < DateTime.UtcNow)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="bi bi-box-arrow-in-right-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="users">
                    <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Users
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="logs">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Logs
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? token;
    private DateTime? tokenExpiry;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            var strExpiry = await JS.InvokeAsync<string>("localStorage.getItem", "authTokenExpiration");
            tokenExpiry = string.IsNullOrEmpty(strExpiry) ? DateTime.MinValue : DateTime.Parse(strExpiry);
            StateHasChanged();
        }
    }
}
