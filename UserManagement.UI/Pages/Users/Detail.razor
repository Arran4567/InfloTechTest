@page "/users/{id}"
@inject HttpClient Http
@inject IJSRuntime JS
@using UserManagement.UI.Models
@using UserManagement.UI.Pages.Users.Partials

@if (user is null)
{
    <p>Loading...</p>
}
else
{
    <Fields User="user" Readonly="true" />

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Type</th>
                    <th>Description</th>
                    <th>DateTime</th>
                </tr>
            </thead>
            <tbody>
                @if(user != null)
                {
                    foreach (var item in user.Logs.Items)
                    {
                        <tr>
                            <td>
                                @item.Id
                            </td>
                            <td>
                                @item.Type.ToString()
                            </td>
                            <td>
                                @item.Description
                            </td>
                            <td>
                                @item.DateTime
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
    [CascadingParameter] public MainLayout Layout { get; set; } = default!;
    [Parameter] public required string id { get; set; }
    private UserListItemViewModel? user;

    protected override async Task OnInitializedAsync()
    {
        Layout.PageHeader = "User Detail";
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        var request = new HttpRequestMessage(HttpMethod.Get, $"/api/users/detail/{id}");
        if (!string.IsNullOrEmpty(token))
        {
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }
        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<UserListItemViewModel>();
        }
        else
        {
            user = null;
        }
    }
}
