@page "/login"
@using UserManagement.UI.Models
@inject HttpClient Http

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="email" class="form-label">Username</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private UserLoginModel loginModel = new();
    private string? ErrorMessage;

    private async Task HandleLogin()
    {
        ErrorMessage = null;
        try
        {
            var response = await Http.PostAsJsonAsync("api/identity/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (result is not null && !string.IsNullOrEmpty(result.Token))
                {
                    // Store token (for now, localStorage via JSInterop or memory)
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    // Redirect to home or users page
                    Navigation.NavigateTo("/");
                }
                else
                {
                    ErrorMessage = "Invalid response from server.";
                }
            }
            else
            {
                ErrorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
    }

    [Inject] public NavigationManager Navigation { get; set; } = default!;
    [Inject] public IJSRuntime JS { get; set; } = default!;

    private class LoginResult
    {
        public string? Token { get; set; }
    }
}
